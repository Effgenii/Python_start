class Virus:
    number = int
    def __init__(self, number):
        self.number = number
        print('создан вирус', self.number, 'клеток')

class Cell:
    number = int
    def __init__(self, number):
        self.number = number
        print('создана группа', self.number, 'клеток')

    def __add__(self, other):
        try:
            value = self.number + other.number
            assert isinstance(other, self.__class__)
            return Cell(int(value))
        except AssertionError:
            print('Добавляемый объект не является клеткой!')

    def __sub__(self, other):
        try:
            value = self.number - other.number
            assert value > 0
            return Cell(int(value))
        except AssertionError:
            print('Вычитаемый объем клетки больше исходного!')

    def __mul__(self, other):
        value = self.number * other.number
        return Cell(int(value))

    def __truediv__(self, other):
        # не понял в итоге: обычное или целочисленное деление должно быть?
        value = round(self.number / other.number)
        return Cell(int(value))

    def make_order(group_cells, n_row):
        crops = '*' * group_cells.number
        r_crops = [crops[x:x + n_row]
            for x in range(0, len(crops), n_row)]
        return '\n'.join(r_crops)

first = Cell(14)
first_v = Virus(1)
second = Cell(5)
group_cells = Cell(50)
add = first + second
df = first - second
df_2 = second - first
add_v = first + first_v
mu = first * second
td = first / second

print (Cell.make_order(group_cells= group_cells, n_row=8))

# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).Данные методы должны применяться
# только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не целочисленное) деление
# клеток, соответственно. В методе деления должно осуществляться округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение. Создается общая клетка из
# двух. Число ячеек общей клетки определяется как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток. В классе необходимо реализовать метод make_order(),
# принимающий экземпляр класса и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно
# переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются
# все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n**. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n*****.
